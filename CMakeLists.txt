#########################################基于vcpkg构建#######################################################
if (WIN32)
    cmake_minimum_required(VERSION 3.22.1)
else ()
    cmake_minimum_required(VERSION 3.16.3)
endif ()
set(APP_NAME fastSocket)
project(${APP_NAME})
# 构建类型
set(CMAKE_BUILD_TYPE "RELEASE")

# 此语句等价于 cmake -CMAKE_TOOLCHAIN_FILE = E:/repository/c++/vcpkg-2021.05.12/scripts/buildsystems/vcpkg.cmake
if (WIN32)
    set(CMAKE_TOOLCHAIN_FILE "E:/repository/c++/vcpkg-2021.05.12/scripts/buildsystems/vcpkg.cmake")
    if (DEFINED ENV{VCPKG_DEFAULT_TRIPLET} AND NOT DEFINED VCPKG_TARGET_TRIPLET)
        set(VCPKG_TARGET_TRIPLET "$ENV{VCPKG_DEFAULT_TRIPLET}" CACHE STRING "")
    endif ()
endif ()

#c++ 14设置
set(CMAKE_CXX_STANDARD 14)
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    message("-std=c++14")
    set(CMAKE_CXX_FLAGS "-std=c++14 $ENV{CXXFLAGS}")
    if (CMAKE_BUILD_TYPE MATCHES "DEBUG|Debug|debug")
        set(CMAKE_CXX_FLAGS_DEBUG "-O0 -Wall -g2 -ggdb")
    endif ()
    find_package(OpenMP REQUIRED)
    if (OPENMP_FOUND)
        message("OPENMP FOUND")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS} ")
        set(CMAKE_SHARE_LINKER_FLAGS "${CMAKE_SHARE_LINKER_FLAGS} ${OpenMP_SHARE_LINKER_FLAGS}")
    endif ()
else ()
    if (CMAKE_SYSTEM_NAME MATCHES "Windows")
        set(my_std_pre "/std:")
    else ()
        set(my_std_pre "-std=14")
    endif ()

    set(basic_cxx14 "c++14")
    set(str_cxx14 "${my_std_pre}${basic_cxx14}")

    include(CheckCXXCompilerFlag)
    check_cxx_compiler_flag("${str_cxx14}" _cpp_14_flag_supported)
    if (_cpp_14_flag_supported)
        set(CMAKE_CXX_STANDARD 14)
    endif ()

endif ()


# 包含头文件目录
include_directories(include)
include_directories(src)
include_directories(test)

# 用于递归添加头文件
function(include_sub_directories_recursively root_dir)

    if (IS_DIRECTORY ${root_dir})   # 当前路径是一个目录吗，是的话就加入到包含目录
        #MESSAGE("CURRENT DIR PATH: " ${root_dir})
        #屏蔽一些特殊目录
        if (NOT (${root_dir} MATCHES ".vscode|.vs|release"))
            #MESSAGE("include dir: " ${root_dir})
            include_directories(${root_dir})
        endif ()
    endif ()

    file(GLOB ALL_SUB RELATIVE ${root_dir} ${root_dir}/*) # 获得当前目录下的所有文件，让如ALL_SUB列表中
    foreach (sub ${ALL_SUB})
        if (IS_DIRECTORY ${root_dir}/${sub})
            include_sub_directories_recursively(${root_dir}/${sub}) # 对子目录递归调用，包含
        endif ()
    endforeach ()
endfunction()

include_sub_directories_recursively(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_sub_directories_recursively(${CMAKE_CURRENT_SOURCE_DIR}/examples/designPattern)
include_sub_directories_recursively(${CMAKE_CURRENT_SOURCE_DIR}/examples/network)
file(GLOB_RECURSE SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)
file(GLOB_RECURSE INCLUDE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h ${CMAKE_CURRENT_SOURCE_DIR}/include/*.hpp)

set(ALL_SRCS ${SOURCE_FILES} ${INCLUDE_FILES})

if (WIN32)
    find_package(Boost REQUIRED COMPONENTS system thread filesystem atomic log)
    if (NOT Boost_FOUND)
        message(FATAL_ERROR "Not found Boost")
    else ()
        message(STATUS "boost include path is : ${Boost_INCLUDE_DIR}")
        message(STATUS "boost libraries is : ${BOOST_LIBRARIES}")
        message(STATUS "boost libraries dir is : ${Boost_LIBRARY_DIRS}")

        include_directories(${Boost_INCLUDE_DIRS})
        link_directories(${Boost_LIBRARY_DIR_RELEASE})
        #set ( BOOSTLIBS ${Boost_LIBRARIES} PARENT_SCOPE )
        if (CMAKE_SYSTEM_NAME MATCHES "Windows")
            link_libraries(${BOOSTLIBS})
        elseif (CMAKE_SYSTEM_NAME MATCHES "Linux")
            link_libraries(boost_log boost_system boost_thread boost_filesystem boost_atomic boost_date_time boost_chrono boost_regex)
        endif ()
    endif ()
else ()
    set(BOOST_ROOT "/usr/include/boost")
    #添加头文件搜索路径
    include_directories(/usr/include)
    #添加库文件搜索路径
    #ubuntu link_directories ( /usr/lib/x86_64-linux-gnu )
    link_directories(/usr/lib) #cygwin
    link_libraries(boost_log boost_system boost_thread boost_filesystem boost_atomic boost_date_time boost_chrono boost_regex)
    # 添加其他支持
    link_libraries(pthread)
endif ()


# 简单例子
#[[add_executable ( ${APP_NAME} ${CMAKE_SOURCE_DIR}/examples/main.cpp ${ALL_SRCS}
                 ${CMAKE_SOURCE_DIR}/examples/test_thread.hpp
                 ${CMAKE_SOURCE_DIR}/examples/test_process.hpp
                 ${CMAKE_SOURCE_DIR}/examples/test_process_communication.hpp
                 ${CMAKE_SOURCE_DIR}/examples/test_socket.hpp
                 ${CMAKE_SOURCE_DIR}/examples/test_daemon.hpp )]]

#[[# 多线程服务端例子
add_executable ( cbServer
                 ${CMAKE_SOURCE_DIR}/examples/CAndB/server.cpp )

# 多线程客户端例子
add_executable ( cbClient
                 ${CMAKE_SOURCE_DIR}/examples/CAndB/client.cpp )]]

#[[# 多线程服务端例子
add_executable ( thread_server
                 ${CMAKE_SOURCE_DIR}/examples/network/select/server.cpp
                 ${CMAKE_SOURCE_DIR}/examples/network/wrapError/wrap.h
                 ${CMAKE_SOURCE_DIR}/examples/network/wrapError/wrap.cpp )

# 多线程客户端例子
add_executable ( thread_client
                 ${CMAKE_SOURCE_DIR}/examples/network/select/client.cpp
                 ${CMAKE_SOURCE_DIR}/examples/network/wrapError/wrap.h
                 ${CMAKE_SOURCE_DIR}/examples/network/wrapError/wrap.cpp )]]


############################################设计模式############################################################

##########################################创建行为模式###########################################################

# 工厂模式
add_executable(factory_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/factoryPattern/main.cpp
        ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/factoryPattern/cameraFactory.hpp
        ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/factoryPattern/canonCamera.hpp
        ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/factoryPattern/nikonCamera.hpp
        ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/factoryPattern/sonyCamera.hpp)

# 抽象工厂
file(GLOB_RECURSE ABSTRACT_FACTORY_SOURCE_FILES ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/abstractFactoryPattern/*.hpp)

add_executable(abstract_factory_pattern
        ${ABSTRACT_FACTORY_SOURCE_FILES}
        ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/abstractFactoryPattern/main.cpp)

# 单例模式模式

##饿汉模式
file(GLOB_RECURSE HUNGRY_MAN_SINGLETON_SOURCE_FILES ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/singletonPattern/hungryMan/*.hpp)

add_executable(hungry_man_singleton
        ${HUNGRY_MAN_SINGLETON_SOURCE_FILES}
        ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/singletonPattern/hungryMan/main.cpp)

#懒汉模式
file(GLOB_RECURSE LAZYBONES_SINGLETON_SOURCE_FILES ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/singletonPattern/lazybones/*.hpp)

add_executable(lazybones_singleton
        ${LAZYBONES_SINGLETON_SOURCE_FILES}
        ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/singletonPattern/lazybones/main.cpp)

# 构建者模式
add_executable(build_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/builderPattern/main.cpp)

# 原型模式( 拷贝模式 )
add_executable(prototype_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/creationPattern/prototypePattern/main.cpp)

##########################################结构型模式###########################################################

# 改造者(适配器)模式
add_executable(adapter_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/structuralPattern/adapterPattern/main.cpp)

# 桥接模式模式
add_executable(bridge_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/structuralPattern/bridgePattern/main.cpp)

# 过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）
add_executable(filter_criteria_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/structuralPattern/filterAndCriteriaPattern/main.cpp)

# 组合模式
add_executable(component_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/structuralPattern/componentPattern/main.cpp)

# 装饰器模式
add_executable(decorator_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/structuralPattern/decoratorPattern/main.cpp)

# 享元模式
add_executable(flyweight_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/structuralPattern/flyweightPattern/main.cpp)

# 代理模式
add_executable(proxy_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/structuralPattern/proxyPattern/main.cpp)

##########################################行为型模式###########################################################

# 责任链模式
add_executable(chainOfResponsibility_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/chainOfResponsibilityPattern/main.cpp)

# 命令模式
add_executable(command_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/commandPattern/main.cpp)

# 解释器模式
add_executable(interpreter_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/interpreterPattern/main.cpp)

# 迭代器模式
add_executable(iterator_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/iteratorPattern/main.cpp)

# 中介者模式
add_executable(mediator_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/mediatorPattern/main.cpp)

# 备忘录模式
add_executable(memento_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/mementoPattern/main.cpp)

# 观察者模式
add_executable(observer_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/observerPattern/main.cpp)

# 状态模式
add_executable(state_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/statePattern/main.cpp)

# 空对象模式
add_executable(null_object_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/nullObjectPattern/main.cpp)

# 策略模式
add_executable(strategy_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/strategyPattern/main.cpp)

# 模板模式
add_executable(template_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/templatePattern/main.cpp)

# 访问者模式
add_executable(visitor_pattern
        ${CMAKE_SOURCE_DIR}/examples/designPattern/behavioralPattern/visitorPattern/main.cpp)
